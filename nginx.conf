
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #log_format test '$arg_key   $arg_val';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    upstream redis_cluster {
        server 127.0.0.1:6379;
    #   server 127.0.0.1:6380;
    }

    server {
        listen       80;
        listen       8080;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location /msgserver/sendinfo.jsp {
                content_by_lua '
        local data = nil
        if ngx.req.get_method() == ngx.HTTP_POST then
                ngx.req.read_body()
                data = ngx.req.get_post_args()
        else
                data = ngx.req.get_uri_args()
        end

        ngx.header.content_type = "text/html"
        if data and data["group"] and data["subject"] and data["msg"] then
                ngx.location.capture("/redis",{ args = { key = "message", val = "data:{"..data["group"].."},subject:{"..data["subject"].."},msg:{"..data["msg"].."}" } })
                ngx.print("DONE!!")
                ngx.exit(200)
        else
                ngx.print("DATA FORMAT ERROR!!")
                ngx.exit(500)
        end
                                ';
        }

        location /redis {
                internal;
                #access_log logs/redis.log test;
                redis2_next_upstream error timeout invalid_response;
                set_unescape_uri $key $arg_key;
                set_unescape_uri $val $arg_val; 
                redis2_query lpush  $key $val ;
                redis2_pass redis_cluster;
        }

    }


}
